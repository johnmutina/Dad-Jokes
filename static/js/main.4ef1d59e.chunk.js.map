{"version":3,"sources":["JokeVote.js","JokeText.js","JokeIcon.js","JokeRow.js","JokeMachine.js","App.js","serviceWorker.js","index.js"],"names":["JokeVote","_this","this","react_default","a","createElement","className","index_es","icon","faArrowUp","onClick","props","handleVote","concat","curEmotion","curVote","faArrowDown","Component","JokeText","text","JokeIcon","dist_default","type","JokeRow","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","jokeVote","status","sad","angry","ok","wow","laugh","bind","assertThisInitialized","vote","newVote","setState","src_JokeVote_0","src_JokeText","data","joke","src_JokeIcon_0","JokeMachine","jokesObj","JSON","parse","window","localStorage","getItem","isLoading","seenJokes","Set","map","j","fetchJokes","length","jokes","numJokesToGet","Axios","get","headers","Accept","response","newJoke","has","push","toConsumableArray","setItem","stringify","alert","_context2","t0","alt","src","react_loader_spinner_default","color","height","width","src_JokeRow_0","key","uuid","defaultProps","App","src_JokeMachine_0","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kZA+BeA,mLAzBF,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACID,UAAU,mCACVE,KAAMC,IACNC,QAAS,kBAAMT,EAAKU,MAAMC,WAAW,SAEzCT,EAAAC,EAAAC,cAAA,OACIC,UAAS,iDAAAO,OACLX,KAAKS,MAAMG,aAGdZ,KAAKS,MAAMI,SAEhBZ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACID,UAAU,qCACVE,KAAMQ,IACNN,QAAS,kBAAMT,EAAKU,MAAMC,WAAW,mBAnBlCK,aCORC,mLARP,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKH,KAAKS,MAAMQ,cAJTF,8BCYRG,0LARP,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAekB,KAAMpB,KAAKS,MAAMI,kBAJzBE,cC+DRM,qBA5DX,SAAAA,EAAYZ,GAAO,IAAAV,EAAA,OAAAuB,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACftB,EAAAuB,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAMS,KACDkB,MAAQ,CACTC,SAAU,EACVC,OAAQ,CACJC,IAAK,MACLC,MAAO,QACPC,GAAI,MACJC,IAAK,MACLC,MAAO,SAGfnC,EAAKW,WAAaX,EAAKW,WAAWyB,KAAhBb,OAAAc,EAAA,EAAAd,CAAAvB,IAZHA,0EAeRsC,GACP,IAAIC,EAAUtC,KAAK2B,MAAMC,SACZ,OAATS,EACAC,IAEAA,IAEJtC,KAAKuC,SAAS,CACVX,SAAUU,qCAKd,IAAI1B,EAcJ,OAXIA,EADAZ,KAAK2B,MAAMC,UAAY,EACV5B,KAAK2B,MAAME,OAAX,MACN7B,KAAK2B,MAAMC,SAAW,EAChB5B,KAAK2B,MAAME,OAAX,IACkB,IAAxB7B,KAAK2B,MAAMC,SACL5B,KAAK2B,MAAME,OAAX,GACN7B,KAAK2B,MAAMC,SAAW,EAChB5B,KAAK2B,MAAME,OAAX,MAEA7B,KAAK2B,MAAME,OAAX,IAIb5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACqC,EAAD,CACIpC,UAAU,kBACVS,QAASb,KAAK2B,MAAMC,SACpBhB,WAAYA,EACZF,WAAYV,KAAKU,aAErBT,EAAAC,EAAAC,cAACsC,EAAD,CACIrC,UAAU,eACVa,KAAMjB,KAAKS,MAAMiC,KAAKC,OAE1B1C,EAAAC,EAAAC,cAACyC,EAAD,CAAU/B,QAASD,YAvDbG,iECGhB8B,qBAIF,SAAAA,EAAYpC,GAAO,IAAAV,EAAA,OAAAuB,OAAAC,EAAA,EAAAD,CAAAtB,KAAA6C,IACf9C,EAAAuB,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAuB,GAAAnB,KAAA1B,KAAMS,KACDkB,MAAQ,CACTmB,SAAUC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UAAY,MAC7DC,WAAW,GAEfrD,EAAKsD,UAAY,IAAIC,IAAIvD,EAAK4B,MAAMmB,SAASS,IAAI,SAAAC,GAAC,OAAIA,EAAEb,QACxD5C,EAAK0D,WAAa1D,EAAK0D,WAAWtB,KAAhBb,OAAAc,EAAA,EAAAd,CAAAvB,IAPHA,2LAWoB,IAA/BC,KAAK2B,MAAMmB,SAASY,QACpB1D,KAAKyD,+QAMLzD,KAAKuC,SAAS,CAAEa,WAAW,IACvBO,EAAQ,eACLA,EAAMD,OAAS1D,KAAKS,MAAMmD,gDACRC,IAAMC,IA3B3B,8BA2BwC,CACpCC,QAAS,CAAEC,OAAQ,6BADnBC,SAGAC,EAAUD,EAASvB,KAClB1C,KAAKqD,UAAUc,IAAID,EAAQvB,OAC5BgB,EAAMS,KAAKH,EAASvB,6BAG5B1C,KAAKuC,SAAS,CACVO,SAAQ,GAAAnC,OAAAW,OAAA+C,EAAA,EAAA/C,CAAMtB,KAAK2B,MAAMmB,UAAaa,GACtCP,WAAW,IAEfH,OAAOC,aAAaoB,QAAQ,QAASvB,KAAKwB,UAAUZ,sDAEpDa,MAAKC,EAAAC,IACL1E,KAAKuC,SAAS,CAAEa,WAAW,iJAK/B,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACVH,EAAAC,EAAAC,cAAA,mBADJ,UAGAF,EAAAC,EAAAC,cAAA,OACIwE,IAAI,gBACJC,IAAI,+FAER3E,EAAAC,EAAAC,cAAA,UACIC,UAAU,sBACVI,QAASR,KAAKyD,YAFlB,gBAOJxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACVJ,KAAK2B,MAAMyB,UACRnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAC0E,EAAA3E,EAAD,CACIkB,KAAK,OACL0D,MAAM,UACNC,OAAO,MACPC,MAAM,SAIdhF,KAAK2B,MAAMmB,SAASS,IAAI,SAAAZ,GAAI,OACxB1C,EAAAC,EAAAC,cAAC8E,EAAD,CAASC,IAAKC,MAAQzC,KAAMC,eA1E9B5B,cAApB8B,EACKuC,aAAe,CAClBxB,cAAe,IAiFRf,cChFAwC,MARf,WACI,OACIpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACmF,EAAD,QCKQC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4ef1d59e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./JokeVote.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\n\nclass JokeVote extends Component {\n    render() {\n        return (\n            <div className=\"JokeVote\">\n                <FontAwesomeIcon\n                    className=\"JokeVote-arrow JokeVote-arrow-up\"\n                    icon={faArrowUp}\n                    onClick={() => this.props.handleVote(\"up\")}\n                />\n                <div\n                    className={`JokeVote-voteContainer JokeVote-voteContainer-${\n                        this.props.curEmotion\n                    }`}\n                >\n                    {this.props.curVote}\n                </div>\n                <FontAwesomeIcon\n                    className=\"JokeVote-arrow JokeVote-arrow-down\"\n                    icon={faArrowDown}\n                    onClick={() => this.props.handleVote(\"down\")}\n                />\n            </div>\n        );\n    }\n}\n\nexport default JokeVote;\n","import React, { Component } from \"react\";\n\nclass JokeText extends Component {\n    render() {\n        return (\n            <div>\n                <h5>{this.props.text}</h5>\n            </div>\n        );\n    }\n}\n\nexport default JokeText;\n","import React, { Component } from \"react\";\nimport FacebookEmoji from \"react-facebook-emoji\";\nimport \"./JokeIcon.css\";\n\nclass JokeIcon extends Component {\n    render() {\n        return (\n            <div className=\"JokeIcon\">\n                <FacebookEmoji type={this.props.curVote} />\n            </div>\n        );\n    }\n}\n\nexport default JokeIcon;\n","import React, { Component } from \"react\";\nimport JokeVote from \"./JokeVote\";\nimport JokeText from \"./JokeText\";\nimport JokeIcon from \"./JokeIcon\";\nimport \"./JokeRow.css\";\n\nclass JokeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            jokeVote: 0,\n            status: {\n                sad: \"sad\",\n                angry: \"angry\",\n                ok: \"yay\",\n                wow: \"wow\",\n                laugh: \"haha\"\n            }\n        };\n        this.handleVote = this.handleVote.bind(this);\n    }\n\n    handleVote(vote) {\n        let newVote = this.state.jokeVote;\n        if (vote === \"up\") {\n            newVote++;\n        } else {\n            newVote--;\n        }\n        this.setState({\n            jokeVote: newVote\n        });\n    }\n\n    render() {\n        let curEmotion;\n\n        if (this.state.jokeVote < -5) {\n            curEmotion = this.state.status[\"angry\"];\n        } else if (this.state.jokeVote < 0) {\n            curEmotion = this.state.status[\"sad\"];\n        } else if (this.state.jokeVote === 0) {\n            curEmotion = this.state.status[\"ok\"];\n        } else if (this.state.jokeVote > 5) {\n            curEmotion = this.state.status[\"laugh\"];\n        } else {\n            curEmotion = this.state.status[\"wow\"];\n        }\n\n        return (\n            <div className=\"JokeRow\">\n                <JokeVote\n                    className=\"JokeRow-buttons\"\n                    curVote={this.state.jokeVote}\n                    curEmotion={curEmotion}\n                    handleVote={this.handleVote}\n                />\n                <JokeText\n                    className=\"JokeRow-text\"\n                    text={this.props.data.joke}\n                />\n                <JokeIcon curVote={curEmotion} />\n            </div>\n        );\n    }\n}\n\nexport default JokeRow;\n","import React, { Component } from \"react\";\nimport JokeRow from \"./JokeRow\";\nimport Axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport uuid from \"uuid\";\nimport \"./JokeMachine.css\";\n\nconst API_URL = \"https://icanhazdadjoke.com/\";\n\nclass JokeMachine extends Component {\n    static defaultProps = {\n        numJokesToGet: 10\n    };\n    constructor(props) {\n        super(props);\n        this.state = {\n            jokesObj: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n            isLoading: false\n        };\n        this.seenJokes = new Set(this.state.jokesObj.map(j => j.joke));\n        this.fetchJokes = this.fetchJokes.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.state.jokesObj.length === 0) {\n            this.fetchJokes();\n        }\n    }\n\n    async fetchJokes() {\n        try {\n            this.setState({ isLoading: true });\n            let jokes = [];\n            while (jokes.length < this.props.numJokesToGet) {\n                let response = await Axios.get(API_URL, {\n                    headers: { Accept: \"application/json\" }\n                });\n                let newJoke = response.data;\n                if (!this.seenJokes.has(newJoke.joke)) {\n                    jokes.push(response.data);\n                }\n            }\n            this.setState({\n                jokesObj: [...this.state.jokesObj, ...jokes],\n                isLoading: false\n            });\n            window.localStorage.setItem(\"jokes\", JSON.stringify(jokes));\n        } catch (e) {\n            alert(e);\n            this.setState({ isLoading: false });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"JokeMachine\">\n                <div className=\"JokeMachine-sidebar\">\n                    <h1 className=\"JokeMachine-title\">\n                        <span>Dad</span> Jokes\n                    </h1>\n                    <img\n                        alt=\"laughing icon\"\n                        src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\n                    />\n                    <button\n                        className=\"JokeMachine-getmore\"\n                        onClick={this.fetchJokes}\n                    >\n                        Fetch Jokes\n                    </button>\n                </div>\n                <div className=\"JokeMachine-jokes\">\n                    {this.state.isLoading ? (\n                        <div className=\"JokeMachine-loaderBox\">\n                            <Loader\n                                type=\"Puff\"\n                                color=\"#9575CD\"\n                                height=\"130\"\n                                width=\"130\"\n                            />\n                        </div>\n                    ) : (\n                        this.state.jokesObj.map(joke => (\n                            <JokeRow key={uuid()} data={joke} />\n                        ))\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default JokeMachine;\n","import React from \"react\";\nimport JokeMachine from \"./JokeMachine\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <JokeMachine />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}